@typeparam RowType

<link rel="stylesheet" href="errorBoundaries.css" />

<div class="container-fluid">
    <div class="row p-2">
        <div class="col">
            <SelectFilter Title="@("Sort")" Values="@SortDirectionChoices" 
                @bind-SelectedValue="SortDirectionSelection" />
        </div>
        <div class="col">
            <ErrorBoundary @ref="boundary">
                <ChildContent>
                    <SelectFilter Title="@("Highlight")" 
                        Values="@HighlightChoices()" 
                        @bind-SelectedValue="HighlightSelection" />
                </ChildContent>
                <ErrorContent>
                    <h6 class="bg-danger text-white text-center h-100 p-2">
                        Inline error: Sales Selected
                        <div>
                            <button class="btn btn-light btn-sm m-1" 
                                @onclick="@(() => 
                                    boundary?.Recover())">Recover</button>
                        </div>
                    </h6>
                </ErrorContent>
            </ErrorBoundary>
        </div>
    </div>
</div>

<table class="table table-sm table-bordered table-striped">
    @if (Header != null) {
        <thead>@Header</thead>
    }
    <tbody>
        @if (RowTemplate != null) {
            @foreach (RowType item in SortedData()) {
                <tr class="@IsHighlighted(item)">@RowTemplate(item)</tr>
            }
        }
    </tbody>
</table>

@code {

    ErrorBoundary? boundary;

    [Parameter]
    public RenderFragment? Header { get; set; }

    [Parameter]
    public RenderFragment<RowType>? RowTemplate { get; set; }

    [Parameter]
    public IEnumerable<RowType> RowData { get; set; } 
        = Enumerable.Empty<RowType>();

    [Parameter]
    public Func<RowType, string> Highlight { get; set; } = (row) => String.Empty;

    public IEnumerable<string> HighlightChoices() =>
        RowData.Select(item => Highlight(item)).Distinct();

    public string? HighlightSelection { get; set; }

    public string IsHighlighted(RowType item) =>
        Highlight(item) == HighlightSelection ? "table-dark text-white": "";

    [Parameter]
    public Func<RowType, string> SortDirection { get; set; } 
        = (row) => String.Empty;

    public string[] SortDirectionChoices =
        new string[] { "Ascending", "Descending" };

    public string SortDirectionSelection { get; set; } = "Ascending";

    public IEnumerable<RowType> SortedData() =>
        SortDirectionSelection == "Ascending"
            ? RowData.OrderBy(SortDirection)
            : RowData.OrderByDescending(SortDirection);
}
